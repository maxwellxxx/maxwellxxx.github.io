---
layout: post
title: 浅析openstack中WSGI+Restful router“框架？”
description: 就算不能实习，也要继续学习
category: project
---

##引
还有2个月不到就要毕业了，公司主管希望我去实习，奈何导师项目没有结题和导师态度强硬，只好在学校努力学习公司可能会用到的知识，以防正式工作时拖团队后腿。根据初步了解，公司一部分架构为openstack+KVM+docker。虽然个人比较关注KVM和docker相关的内容，但是按照一般化的套路，还是需要了解下架构的上层原理。所以先花了几天大概看了下openstack和顺带学习了python，没想到被圏粉，话不多说，进入正题。

关于Openstack整体架构，就不在这里赘述，而其实我也只是大概了解。简单假设openstack中仅有DashBoard(Horizon)、Compute(Nova)、Network(Neutron)、Object Storage(Swift)、Image Service(Glance)、Identity(Keystone)这几个子项目组成。Openstack的一般工作方式是通过浏览器登陆DashBoard，然后通过GUI进行各种操作。在此期间DashBoard会以HTTP的形式向其它项目请求对应的服务，而其他项目之间也是通过HTTP的形式进行通讯；项目内部则通过消息总线进行通讯，openstack支持的消息总线类型中，大部分是基于AMQP的，以后会进行分析。

##WSGI(Web Server Gateway Interface) & Python Paste
在openstack中，Dashboard仅仅是运行再Web Server上的GUI，如果涉及到相关的事务处理，需要将HTTP请求转发到Application Server。而如Nova、Glance等组件则可以理解为运行在Application Server上。WSGI是Python语言中所定义的Web服务器和Web应用程序或框架之间的通用接口标准，而这里所指的Web服务器，我理解为就是Application Server。

WSGI将Web组件分为三类：
<ul>
<li>服务器(WSGI Server)，就是我理解的Application Server。负责接收HTTP请求，并封装一系列的环境变量。</li>
<li>中间件(WSGI Middleware)，负责将HTTP请求路由给不同的应用对象，并将处理结果返回给WSGI Server。从服务端看，中间件就是个WSGI应用，而从应用端看，中间件相当于服务端。</li>
<li>应用程序(WSGI Application)，是可被调用的Python对象，一般接收两个参数，environ和start_response（回调函数）。</li>
</ul>

当一个请求发送（转发）到WSGI Server时，Server会为应用端准备上下文信息和回调函数，应用端处理完后，便使用提供的回调函数返回相应的请求结果。其中中间件则作为服务端和应用端之间交互的一种包装，经过不同的中间件，便具有不同的功能，如URL分发、权限认证等，不同中间件的组合形成和WSGI的框架。虽然感觉很复杂，但Openstack中使用Paset的Deploy组件来完成WSGI服务器和应用的构建，这一切就变得简单多了。

###Paste Deploy
使用Paste Deploy的一个主要目的是用来生成WSGI Application，而通过Deploy生成应用程序则依赖于paste配置文件，形如官方给出的这种形式：

	[composite:main]
	use = egg:Paste#urlmap
	/ = home
	/blog = blog
	/wiki = wiki
	/cms = config:cms.ini

	[app:home]
	use = egg:Paste#static
	document_root = %(here)s/htdocs

	[filter-app:blog]
	use = egg:Authentication#auth
	next = blogapp
	roles = admin
	htpasswd = /home/me/users.htpasswd

	[app:blogapp]
	use = egg:BlogApp
	database = sqlite:/home/me/blog.db

	[app:wiki]
	use = call:mywiki.main:application
	database = sqlite:/home/me/wiki.db

关于具体配置文件的解读可以参考<a href="http://www.cnblogs.com/Security-Darren/p/4087587.html">详解Paste deploy</a>，在Nova组件中，配置文件位于etc/nova/api-paste.ini，有了配置文件后则进行一下调用以生成WSGI Application：
	
	##nova/wsgi.py
	465 class Loader(object):
	466     """Used to load WSGI applications from paste configurations."""
	467        
	468     def __init__(self, config_path=None):
	.......
	.......
	485        
	486     def load_app(self, name):
	487         """Return the paste URLMap wrapped WSGI application.
	488        
	489         :param name: Name of the application to load.
	490         :returns: Paste URLMap object wrapping the requested application.
	491         :raises: `nova.exception.PasteAppNotFound`
	492        
	493         """
	494         try:
	495             LOG.debug("Loading app %(name)s from %(path)s",
	496                       {'name': name, 'path': self.config_path})
	497             return deploy.loadapp("config:%s" % self.config_path, name=name)
	498         except LookupError:
	499             LOG.exception(_LE("Couldn't lookup app: %s"), name)
	500             raise exception.PasteAppNotFound(name=name, path=self.config_path)

deploy.loadapp返回值则可用作类似以下这种方式来构建WSGI服务器：

	httpd = wsgiref.simple_server('localhost', 8282, wsgi_app)  
	httpd.serve_forever()

这样就完成了应用服务器的构建了。

##RESTful API & Routes
openstack中项目都是通过RESTful API向外提供服务，什么是RESTful架构是目前最流行的一种互联网软件架构，概念请自行搜索，或参考<a href="http://www.ruanyifeng.com/blog/2011/09/restful">理解RESTful架构</a>，RESTful的核心是资源和资源上的操作，即Openstack定义了许多资源，并实现了针对资源的各种操作函数。根据上文，HTTP请求经过WSGI中间件后，可以被路由到各个“应用”，而这仅仅是将URL路由到不同的应用，而应用中必然存在许多“资源”以及“资源”对应的各种操作函数。如何将HTTP请求路由到资源对应的函数上，则不是WSGI中间件的工作。

Openstack中使用的RESTful路由模块是Routes，是对Rails on Ruby的重新实现，其使用方式可以参考<a href="http://blog.csdn.net/tantexian/article/details/37879939">wsgi-restful-routes详解</a>。

##根据Openstack进行相关分析
有了上文的基础，可以想象下Nova组件是如何响应HTTP请求的，其大致流程应该如下所述：WSGI Server接收到HTTP请求；根据Server上的Nova app生成所使用的配置文件，将HTTP请求路由到相应的“应用”上（这里指的应用就是可调用的Python对象）;根据“应用”中Routes定义的路由规则，将请求路由到相应资源的不同操作函数上。

参考<a href="http://blog.csdn.net/tantexian/article/details/37740379">paste从ini配置文件->routesr具体发布流程</a>可以看到nova响应请求时的流程。

##注意点
1.
	
	[composite:main]
	use = egg:Paste#urlmap
	/ = home
	/blog = blog
	/wiki = wiki
	/cms = config:cms.ini

	[app:home]
	use = egg:Paste#static
	document_root = %(here)s/htdocs

在这种paste配置文件中use后的“/blog = blog”，“document_root = %(here)s/htdocs”都是作为use调用函数的参数。

2.Routes的初始化时机
Routes初始化时机一般在类\_\_init\_\_中，比如openstack中，就使用APIRouter类作为API的入口点，如Nova中

	 nova/api/openstack/compute/__init__.py
	 51 class APIRouter(nova.api.openstack.APIRouter):
	 52     """Routes requests on the OpenStack API to the appropriate controller
	 53     and method.
	 54     """
	 55     ExtensionManager = v2_extensions.ExtensionManager
	 56  
	 57     def __init__(self, ext_mgr=None, init_only=None):
	 58         LOG.warning(_LW(
	 59             "Deprecated: Starting with the Liberty release, the v2 API was "
	 60             "already deprecated and the v2.1 API is set as the default. Nova "
	 61             "also supports v2.1 API legacy v2 compatible mode for switching "
	 62             "to v2.1 API smoothly. For more information on how to configure "
	 63             "v2.1 API and legacy v2 compatible mode, please refer Nova "
	 64             "api-paste.ini sample file."))
	 65         super(APIRouter, self).__init__(ext_mgr=ext_mgr,
	 66                                         init_only=init_only)
	 67  
	 68     def _setup_routes(self, mapper, ext_mgr, init_only):	##对应父类中的self._setup_routes
	 69         if init_only is None or 'versions' in init_only:
	 70             self.resources['versions'] = legacy_v2_versions.create_resource()
	 71             mapper.connect("versions", "/",
	 72                         controller=self.resources['versions'],
	 73                         action='show',
	 74                         conditions={"method": ['GET']})
	 .......
	 在此处初始化Routes
	 .......

而以上APIRouter的父类为：

	nova/api/openstack/__init__.py
	250 class APIRouter(base_wsgi.Router):
	251     """Routes requests on the OpenStack API to the appropriate controller
	252     and method.
	253     """
	254     ExtensionManager = None  # override in subclasses
	255  
	256     @classmethod
	257     def factory(cls, global_config, **local_config):
	258         """Simple paste factory, :class:`nova.wsgi.Router` doesn't have one."""
	259         return cls()
	260  
	261     def __init__(self, ext_mgr=None, init_only=None):
	262         if ext_mgr is None:
	263             if self.ExtensionManager:
	264                 ext_mgr = self.ExtensionManager()
	265             else:
	266                 raise Exception(_("Must specify an ExtensionManager class"))
	267  
	268         mapper = ProjectMapper()
	269         self.resources = {}
	270         self._setup_routes(mapper, ext_mgr, init_only)	##被继承后实现
	271         self._setup_ext_routes(mapper, ext_mgr, init_only)
	272         self._setup_extensions(ext_mgr)
	273         super(APIRouter, self).__init__(mapper)
	274  
	275     def _setup_ext_routes(self, mapper, ext_mgr, init_only):
	276         for resource in ext_mgr.get_resources():
	277             LOG.debug('Extending resource: %s',
	278                       resource.collection)
	279  
	280             if init_only is not None and resource.collection not in init_only:
	281                 continue
	282  
	283             inherits = None

根据《wsgi-restful-routes详解》中所述，最后请求由osapi_compute_app_v2应用处理，在paste-ini中的定义为：
 	
	 etc/nova/api-paste.ini
	 76 [app:osapi_compute_app_legacy_v2]
	 77 paste.app_factory = nova.api.openstack.compute:APIRouter.factory

由于是工厂函数，那么APIRouter类在应用生成时就已经初始化，即APIRouter.\_\_init\_\_会最先得到执行，这时候就已经定义了Routes的RESTful API路由规则，此后在调用osapi_compute_app_legacy_v2响应请求时，仅仅调用类的cls()，而APIRouter又继承base_wsgi.Router，那么\_\_call\_\_则由Router类定义，所作工作就是根据路由规则路由到相应的controller，从而由Controller执行对应action的函数。

由此可见APIRouter类的存在完成了RESTful的路由规则定义(\_\_init\_\_函数)以及分发工作(\_\_call\_\_函数)。

3.paste中的工厂函数，如：
	  
	[DEFAULT] 
	name=huang
	[composite:main]
	use=egg:Paste#urlmap
	/test=show
	  
	[pipeline:show]
	pipeline = root
	 
	[app:root]
	paste.app_factory = testroutes:Router.app_factory

其中构建应用时，工厂函数定义的类就会被首先实例化，并执行类中定义的\_\_init\_\_。而且实例化的类在应用的生命周期中都不会被销毁，即以后调用工厂函数时，仅仅调用工厂函数，并不会再次实例化类，此点再下节中做出证明。

4

	 etc/nova/api-paste.ini
	 39 [composite:openstack_compute_api_legacy_v2]
	 40 use = call:nova.api.auth:pipeline_factory
	 41 noauth2 = cors compute_req_id faultwrap sizelimit noauth2 legacy_ratelimit osapi_compute_app_legacy_v2
	 42 keystone = cors compute_req_id faultwrap sizelimit authtoken keystonecontext legacy_ratelimit osapi_compute_app_legacy_v2
	 43 keystone_nolimit = cors compute_req_id faultwrap sizelimit authtoken keystonecontext osapi_compute_app_legacy_v2

根据《wsgi-restful-routes详解》中所述，noauth2、keystone等都作为参数给pipeline_factory，根据pipeline_factory中读取的配置文件决定是执行noauth2、keystone、keystone_nolimit三者中哪一行应用。


##仿Openstack的WSGI接口及RESTul服务实现（转）【1】
Openstack的WSGI接口通过webob,pastedeploy,routes实现了Controller类，和Router类，这里仿照Openstack的WSG接口实现简单的测试程序。首先是testroutes.py文件：
	
	###testroutes.py
	import logging
	import os

	import webob.dec  
	import webob.exc
	from paste.deploy import loadapp
	from wsgiref.simple_server import make_server  

	import routes.middleware  
	# Environment variable used to pass the request context
	CONTEXT_ENV = 'openstack.context'


	# Environment variable used to pass the request params
	PARAMS_ENV = 'openstack.params'

	LOG = logging.getLogger(__name__)

	class Controller(object): 
	    @webob.dec.wsgify
	    def __call__(self, req):
		arg_dict = req.environ['wsgiorg.routing_args'][1]
		action = arg_dict.pop('action')
		del arg_dict['controller']
		context = req.environ.get(CONTEXT_ENV, {})
		context['query_string'] = dict(req.params.iteritems())
		context['headers'] = dict(req.headers.iteritems())
		context['path'] = req.environ['PATH_INFO']
		params = req.environ.get(PARAMS_ENV, {})

		for name in ['REMOTE_USER', 'AUTH_TYPE']:
		    try:
		        context[name] = req.environ[name]
		    except KeyError:
		        try:
		            del context[name]
		        except KeyError:
		            pass

		params.update(arg_dict)

		# TODO(termie): do some basic normalization on methods
		method = getattr(self, action)

		
		result = method(context, **params)
		
		return webob.Response('OK')
	    
	    def getMessage(self,context, user_id):
		return {'Message': 'TestMessage'}
		pass
		
	class Router(object):  
	    def __init__(self):  
		print 'test1'
		self._mapper = routes.Mapper()  
		self._mapper.connect('/test/{user_id}',
		                    controller=Controller(),
		                    action='getMessage',
		                    conditions={'method': ['GET']})
		
		self._router = routes.middleware.RoutesMiddleware(self._dispatch, self._mapper)
	     
	    @webob.dec.wsgify  
	    def __call__(self, req):
		return self._router
	    
	    @staticmethod  
	    @webob.dec.wsgify  
	    def _dispatch(req):
		match = req.environ['wsgiorg.routing_args'][1]  
		              
		if not match:  
		    return webob.exc.HTTPNotFound()  
		      
		app = match['controller']
		return app
	    
	    @classmethod
	    def app_factory(cls, global_config, **local_config): 
		print 'test2'
		return cls()
		

	if __name__ == '__main__':
	    configfile='testroutes.ini'
	    appname="main"
	    wsgi_app = loadapp("config:%s" % os.path.abspath(configfile), appname)  
	    httpd = make_server('localhost', 8282, wsgi_app)  
	    httpd.serve_forever()

	#####testroutes.ini
	[DEFAULT]
	name=huang

	[composite:main]
	use=egg:Paste#urlmap
	/=show

	[pipeline:show]
	pipeline = root

	[app:root]
	paste.app_factory = testroutes:Router.app_factory

由此可见，ini文件按照pastedeploy的模式配置了根目录/，指向pipeline show，pipeline又指向app root。app下指向的是Router的app_factory函数，返回的是Router().根据调用过程，初始化\_\_init\_\_->\_\_call\_\_返回self._routers.根据\_\_init\_\_下的映射规则，能识别类似/test/123这样的路径，其处理函数调用"Controller"的"action"函数，也就是getMessage。

测试运行，在浏览器下输入127.0.0,1:8282/test/123，返回OK。而这里的OK是不是getMessage返回的，而是由Controller的\_\_call\_\_返回。

###验证
运行后，在浏览器中不停刷新127.0.0,1:8282/test/123，可以看到控制台输出如下：

	$ wsgi python testroutes.py
	test1
	test2
	127.0.0.1 - - [15/Apr/2016 16:41:51] "GET /test/123 HTTP/1.1" 200 5
	test2
	127.0.0.1 - - [15/Apr/2016 16:41:55] "GET /test/123 HTTP/1.1" 200 5
	test2
	127.0.0.1 - - [15/Apr/2016 16:41:56] "GET /test/123 HTTP/1.1" 200 5
	test2
	127.0.0.1 - - [15/Apr/2016 16:41:56] "GET /test/123 HTTP/1.1" 200 5
	test2
	127.0.0.1 - - [15/Apr/2016 16:41:56] "GET /test/123 HTTP/1.1" 200 5
	test2
	127.0.0.1 - - [15/Apr/2016 16:41:56] "GET /test/123 HTTP/1.1" 200 5

可见，工厂函数对应的类确实仅实例化一次。

##后记
仅作为笔记.

##参考目录
[1] http://blog.csdn.net/tantexian/article/details/41547651
