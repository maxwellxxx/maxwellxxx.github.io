---
layout: post
title: Tinyos概要分析
description: 为自己仅剩的学生生涯……
category: project
---

![tinyos](/images/tinyos/tinyos.png)



##一些废话

Tinyos是加州大学伯克利分校的产物……伯克利也真是diao,什么时候国内才能有这么一个大学。想想现在的学术氛围，我就呵呵了……

Tinyos是一种基于组件设计的系统，其实如果真的去看，它都有点儿配不上OS的称号。原生的Tinyos就已经支持了各种硬件平台，最著名的莫过于CrossBow的telosb还有micaz等。我一直接触的就是ATmega128L+CC2430的架构。不过国内李外云博士在CC2530上对Tinyos做了一个完整的移植，我理解Tinyos就是看李博士的著作，在此表示感谢！

废话不说，开始正题：


##目录结构及功能

打开下载的tinyos2.1.2目录，可以看到目录结构如下：

	/tinyos2.1.2
	|-- app
	|-- doc（略）
	|-- licenses（略）
	|-- support
	|-- tools（略）
	|-- tos
	|   |-- chips
	|   |-- interfaces
	|   |-- lib
	|   |-- platforms
	|   |-- sensorboards
	|   |-- system
	|   `types
	|-- changelog(略)
	|-- README（没事看看）
	|-- env.sh（设置环境变量 source执行）
	`-- release-notes.txt（略）
	
###1、app
app文件夹下放的是应用程序，Tinyos没有说编译系统的说法，因为tinyos整个系统都是基于应用程序的（这句话不对啦！）换句话讲：Tinyos只能安装一个应用程序（想用来玩超级玛丽的同学出门左拐），编译器根据应用程序所用的组件来决定怎么编译系统。所以如果要在节点上做点什么，那么在编译应用程序的同时就已经将系统编译好了。

###2、support
support文件夹包括两个目录：make，sdk。

#####make
make文件夹是一个比较重要的文件夹，它包含了目前工程可编译目标平台的生成规则文件。如果你想移植一个平台，就需要好好研究这个目录。这里我们低空飞过。

####sdk
sdk下包括各个语言的开发工具，可以在PC端对节点做些事情，主要串口的接收和发送，不得不说官方的东西还是比较稳定的，如果你想做一个”可演示的系统“，建议使用这里的串口通讯函数。

###3、tos
tos下基本就是包含了整个系统以及各个平台的底层实现了。
chips下包含了各个芯片（包括一些传感器芯片）的底层代码实现，主要是将硬件抽象成各个符合tinyos标准的各个组件，主要有一些基本组件（GPIO，GPIO中断，Flash，Timer）、外设组件（ADC，SPI，UART）、射频通讯组件，还有各个传感器组件等的实现。
interfaces下包含了系统的各个接口，如果某一模块”provide“了某个接口，那么他就需要实现该接口的所有功能。当然也可以自己定义一些接口。
lib下是一些系统组件的实现，包括网络，串口，电源等等。他们都依赖于平台芯片的接口实现。
platforms下就是各个平台的组装工厂，每个平台都有自己的独立目录，它与..../support/make相对应。在这里我们可以利用已经实现的芯片组装自己的平台，平台目录下最重要的文件是“.platform”(是个隐藏文件)，它指明了此平台下所有的硬件实现依赖。
sensorboard下是各个传感器板的驱动实现。
system即tinyos系统目录。

##系统分析
分析一个软件，特别是OS这类的，最简单粗暴的方法就是从开机的第一秒起，看它做了什么。但是由于我也没有去看具体某个平台的Bootloader实现，所以我们所不到开机第一秒了，所以我们这里从第二秒来研究。当一个平台的bootloader将tinyos的启动代码载入后大致发生了这么多的事。

首先进入平台实现的Init接口：需要完成软件的初始化和硬件的初始化。这部分代码在芯片实现下的PlatformP组件。
硬件初始化其实很简单，就是去使用平台必须的一些组件，让他们分别Init。（这些Init接口由每个组件实现，例如GPIO，LED等等）
而软件初始化即如果应用程序中用到平台上某个组件（可能是硬件组件，可能是软件组件），就要在此进行初始化。也是调用这些组件的Init实现。

接着是任务调度器的初始化，这部分是tos自身系统实现。
完成以上这两件事情后，必要的硬件已经完成初始化了，而应用程序使用的组件也已经全部初始化了，那系统就可以进入应用程序，即发出Boot.Booted事件，通知应用程序平台启动成功，可以开始工作。所以，在编写tos的应用程序是，一切都是从booted开始的。

##总结
在这里，我忽略了所有硬件驱动的实现细节……主要是我太懒了，而最主要的是我明白自己以后不会在某个平台上做任何事情。那么所有的知识我们只要够用就好。
综上所述：（我特别喜欢这四个字）tos本身以及应用就是一个搭积木的存在，每个东西都是一个零件，零件上有好多的接口。CPU是一个大零件，上面好多小零件：GPIO，Timer，ADC。。。要使得这些小零件工作就必须先实现一个Init接口。然后根据各个零件的功能，还需要实现各个功能接口，比如GPIO的set啦，ADC的read啦等等。如果要使用外设，那也要实现外设的Init，以及外设的各种功能接口。所有东西都就绪后，应用程序就能通过各个组件暴露的接口来进行各种操作。
如果真的要学如何编写一个应用，只要参考app文件夹就妥了。如果想知道如何移植到新平台，那么去看《CC2530和无线传感器网络 操作系统Tinyos应用实践》你能看到这里写的所有东西，感谢这本书的作者。

