---
layout: post
title: Linux设备驱动模型及其他(2)
description: 明天就是windows10发布的日子了!!
category: manual
---

>上章讲到PCI和ISA的一些历史,描述了PCI总线的设计思路...接下来就来介绍Linux内核是如何探测PCI总线及PCI设备的,并为它们分配资源的.

##PCI配置空间

前面已经讲过,Linux内核在编译时通过设置PCI_DIRECT来绕过BIOS的PCI服务。在系统初始化是，内核就会负责探测和为设备分配资源的工作。可是现在两眼一抹黑，到底是怎么来进行分配的呢?要知道这个事，就得去查阅PCI总线的相关设计标准和技术文档了。相信我，你不会想去看的。。。万幸已经有先驱为我们总结了这些。


PCI是一种无跳线的系统，也就是说，扩展设备可以通过软件来实现相关的配置，而为了支持这种特性，每个PCI设备都规定必须有一个256字节（bytes）长度的配置空间(配置寄存器组)，其中包括了设备的特点和要求的相关信息。而根据PCI相关标准规定，这256字节中只有前64bytes是标准化的，其余的空间可以自由使用。这标准化的64bytes如下图：
***
![PCI_HEADER](/images/pci_header.png)
***

###配置头
这64bytes的空间称为配置空间的头部,而这种头部又分为两种(见图中14位),0型头部用于一般的PCI设备,而1型的头部用于各种PCI桥。其实还有2型头部，用于PCI-CardBus桥的，这种桥存在于笔记本中，在此忽略。而不管哪种类型，头部的16bytes是一样的格式，包括：
<ul>
<li>Vendor ID和Device ID:唯一的标识了厂商和设备类型,前者是由PCI Special Interest Group负责分配,以防止混乱.大英特尔的Vendor ID为0x8086</li>
<li>Header Type:刚刚讲过,标识这是哪种头部,0为一般设备，1为PCI桥。</li>
<li>ClassCode:该字段共16bits,前8bits表示基类,后8bits表示子类,比如高八位为0x02就表示这是个网络设备,而低八位为0则进一步表示这是个Enternet接口卡.而其实这其中第9位是个特殊标志为,0表示为单向,12双向.</li>
</ul>
在Linux代码中定义为:


	 29 #define PCI_STD_HEADER_SIZEOF   64
	 30 #define PCI_VENDOR_ID       0x00    /* 16 bits */
	 31 #define PCI_DEVICE_ID       0x02    /* 16 bits */
	 32 #define PCI_COMMAND     0x04    /* 16 bits */
	 ...
	 45 #define PCI_STATUS      0x06    /* 16 bits */
	 46 #define  PCI_STATUS_INTERRUPT   0x08    /* Interrupt status */
	 ...
	 62 #define PCI_CLASS_REVISION  0x08    /* High 24 bits are class, low 8 revision */
	 63 #define PCI_REVISION_ID     0x08    /* Revision ID */
	 64 #define PCI_CLASS_PROG      0x09    /* Reg. Level Programming Interface */
	 65 #define PCI_CLASS_DEVICE    0x0a    /* Device class */
	 66
	 67 #define PCI_CACHE_LINE_SIZE 0x0c    /* 8 bits */
	 68 #define PCI_LATENCY_TIMER   0x0d    /* 8 bits */
	 69 #define PCI_HEADER_TYPE     0x0e    /* 8 bits */
	 70 #define  PCI_HEADER_TYPE_NORMAL     0
	 71 #define  PCI_HEADER_TYPE_BRIDGE     1
	 72 #define  PCI_HEADER_TYPE_CARDBUS    2


根据这16bytes的内容才可以决定如何进一步处理其他剩下的48bytes.而其实这些头部寄存器还有个作用就是可以使CPU能探测到相应的设备或接口的存在,并确定设备的类型和一些特性,这样免去用户再去通知的麻烦,而改由CPU统一枚举。


###基地址寄存器
一般每个逻辑设备（见下文定义）都有几个需要映射的地址空间，所以在0型头部中还定义了6个“基地址”寄存器，分别用于6个区间的映射。而这些寄存器的操作非常复杂，例如：直接读是区间的地址加上一些标志，当向其中写入全1再读就成了区间长度。除了6个常规区间，有些设备可能还有一块ROM，所以还有一个“扩充ROM基地址”寄存器(148行)，这里给出内核的一些常量定义：

	 80  * Base addresses specify locations in memory or I/O space.
	 81  * Decoded size can be determined by writing a value of
	 82  * 0xffffffff to the register, and reading it back.  Only
	 83  * 1 bits are decoded.
	 84  */
	 85 #define PCI_BASE_ADDRESS_0  0x10    /* 32 bits */
	 86 #define PCI_BASE_ADDRESS_1  0x14    /* 32 bits [htype 0,1 only] */
	 87 #define PCI_BASE_ADDRESS_2  0x18    /* 32 bits [htype 0 only] */
	 88 #define PCI_BASE_ADDRESS_3  0x1c    /* 32 bits */
	 89 #define PCI_BASE_ADDRESS_4  0x20    /* 32 bits */
	 90 #define PCI_BASE_ADDRESS_5  0x24    /* 32 bits */
	 91 #define  PCI_BASE_ADDRESS_SPACE     0x01    /* 0 = memory, 1 = I/O */
	 92 #define  PCI_BASE_ADDRESS_SPACE_IO  0x01
	 93 #define  PCI_BASE_ADDRESS_SPACE_MEMORY  0x00
	 94 #define  PCI_BASE_ADDRESS_MEM_TYPE_MASK 0x06
	 95 #define  PCI_BASE_ADDRESS_MEM_TYPE_32   0x00    /* 32 bit address */
	 96 #define  PCI_BASE_ADDRESS_MEM_TYPE_1M   0x02    /* Below 1M [obsolete] */
	 97 #define  PCI_BASE_ADDRESS_MEM_TYPE_64   0x04    /* 64 bit address */
	 98 #define  PCI_BASE_ADDRESS_MEM_PREFETCH  0x08    /* prefetchable? */
	 99 #define  PCI_BASE_ADDRESS_MEM_MASK  (~0x0fUL)
	100 #define  PCI_BASE_ADDRESS_IO_MASK   (~0x03UL)
	101 /* bit 1 is reserved if address_space = 1 */
	102  
	103 /* Header type 0 (normal devices) */
	104 #define PCI_CARDBUS_CIS     0x28
	105 #define PCI_SUBSYSTEM_VENDOR_ID 0x2c
	106 #define PCI_SUBSYSTEM_ID    0x2e
	107 #define PCI_ROM_ADDRESS     0x30    /* Bits 31..11 are address, 10..1 reserved */
	108 #define  PCI_ROM_ADDRESS_ENABLE 0x01
	109 #define PCI_ROM_ADDRESS_MASK    (~0x7ffUL)
	......
	119 /* Header type 1 (PCI-to-PCI bridges) */
	120 #define PCI_PRIMARY_BUS     0x18    /* Primary bus number */
	121 #define PCI_SECONDARY_BUS   0x19    /* Secondary bus number */
	122 #define PCI_SUBORDINATE_BUS 0x1a    /* Highest bus number behind the bridge */
	123 #define PCI_SEC_LATENCY_TIMER   0x1b    /* Latency timer for secondary interface */
	124 #define PCI_IO_BASE     0x1c    /* I/O range behind the bridge */
	125 #define PCI_IO_LIMIT        0x1d
	126 #define  PCI_IO_RANGE_TYPE_MASK 0x0fUL  /* I/O bridging type*/
	127 #define  PCI_IO_RANGE_TYPE_16   0x00
	128 #define  PCI_IO_RANGE_TYPE_32   0x01
	129 #define  PCI_IO_RANGE_MASK  (~0x0fUL) /* Standard 4K I/O windows */
	130 #define  PCI_IO_1K_RANGE_MASK   (~0x03UL) /* Intel 1K I/O windows */
	131 #define PCI_SEC_STATUS      0x1e    /* Secondary status register, only bit 14 used */
	132 #define PCI_MEMORY_BASE     0x20    /* Memory range behind */
	133 #define PCI_MEMORY_LIMIT    0x22
	134 #define  PCI_MEMORY_RANGE_TYPE_MASK 0x0fUL
	135 #define  PCI_MEMORY_RANGE_MASK  (~0x0fUL)
	136 #define PCI_PREF_MEMORY_BASE    0x24    /* Prefetchable memory range behind */
	137 #define PCI_PREF_MEMORY_LIMIT   0x26
	138 #define  PCI_PREF_RANGE_TYPE_MASK 0x0fUL
	139 #define  PCI_PREF_RANGE_TYPE_32 0x00
	140 #define  PCI_PREF_RANGE_TYPE_64 0x01
	141 #define  PCI_PREF_RANGE_MASK    (~0x0fUL)
	142 #define PCI_PREF_BASE_UPPER32   0x28    /* Upper half of prefetchable memory range */
	143 #define PCI_PREF_LIMIT_UPPER32  0x2c
	144 #define PCI_IO_BASE_UPPER16 0x30    /* Upper half of I/O addresses */
	145 #define PCI_IO_LIMIT_UPPER16    0x32
	146 /* 0x34 same as for htype 0 */
	147 /* 0x35-0x3b is reserved */
	148 #define PCI_ROM_ADDRESS1    0x38    /* Same as PCI_ROM_ADDRESS, but for htype 1 */


而1型头部就有一些区别，毕竟PCI桥并不需要映射地址空间，从定义中也可以看出,有些定义只针对type 0.而在PCI桥设备中,只有PCI_ADDRESS_0和PCI_ADDRESS_1,而特有的寄存器PCI_PRIMARY_BUS和PCI_SECONDARY_BUS记录其连接的上下两端总线号,其中后者为其连接和控制的总线,而PCI_SUBORDINATE_BUS记录着自此之下,以其为根的子树中最大的总线编号。

###IRQ（中断）相关寄存器
一般PCI设备通常是可以发出中断的，所以设备配置寄存器组中还有两个字节（IRQ_LINE,IRQ_PIN）,反映着该设备的总段请求信号线与总线和系统的连接方式。在PCI总线上有INTA～INTD共四条中断请求线，从而在PCI插槽中就会有4根“针”。如果一个设备能产生请求，那么设备内部一定吧中断请求连接到PCI总线的某条中断请求线上.而IRQ_PIN(1~4)就体现了连接到了哪条线,这是硬件决定的，所以这个寄存器是只读。最终连接到系统的中断控制器（8259A或APIC）上的哪一条PCI中断请求线则由IRQ_LINE体现，这称为“中断请求路径”，是由软件选择和设置的，选择的结果放在IRQ_LINE中，注意仅仅保存结果，并不能通过该寄存器来设置。

	114 #define PCI_INTERRUPT_LINE  0x3c    /* 8 bits */
	115 #define PCI_INTERRUPT_PIN   0x3d    /* 8 bits */

而如果是不能产生中断的PCI设备（如大多数显卡），IRQ_PIN就为0。

##配置寄存器组的操作
到这里，大致的概念已经明了，就剩动手了，但是还有个问题需要解决，上一篇中曾经说过：当一个PCI设备上电时, 硬件保持非激活. 换句话说, 设备只响应配置交易. 在上电时, 设备没有内存并且没有 I/O 端口被映射在计算机的地址空间; 每个其他的设备特定的特性, 例如中断报告, 也被关闭。那怎么才能读取到配置寄存器组的内容咧?设想每个设备都有256bytes的寄存器组,那1024个设备就是256KB,这些配置寄存器组本身的地址分配就是个问题。


为了解决这个问题PCI设计时采用这样的解决方案：让所有设备的配置寄存器组都采用相同的地址，由所在总线的PCI桥在访问时附加其它条件来区分。而CPU则通过一个统一的入口地址向“HOST-PCI bridge”发出命令，由PCI桥来间接的完成读写。对于x86，PCI总线的设计者在I/O地址空间保留了8个字节来完成这个工作，那就是0xCF8~0xCFF。这8个字节实际上构成两个32位的寄存器，第一个是“地址寄存器”0xCF8，第二个是“数据寄存器”0xCFF。要访问某个设备的配置寄存器时，CPU先往地址寄存器写如目标地址，然后通过数据寄存器读写数据。而这里写入的目标地址是一种综合的“地址”：包括了总线号、设备号、功能号、以及配置寄存器地址。[1]结构如下：
***
![JCQ](/images/JCQ.png)
***
<ul>
<li>总线号：每条PCI总线都有个总线号，主总线号固定为0，其他的实在CPU枚举时探测到一个总线就递增指定一个总线号</li>
<li>设备号:一般代码一个接口卡槽.</li>
<li>功能号：一块PCI接口卡（插槽）上可以有若干个功能模块，这些模块公用一个PCI总线接口芯片（减低成本），设备号和功能号组成"逻辑设备号",每个插槽可最多容纳8个逻辑设备.</li>
<li>寄存器地址:即要访问的配置寄存器的地址</li>
</ul>
那系统初始化才开始的时候,只有0号总线可以访问,在扫描0号总线时,如果发现上面某个设备是PCI桥,就可以访问其连接的总线了,这也是枚举任务之一。关于0xCF8~0xCFF的I/O口我们可以验证一下：

	$cat /proc/ioprots
	0000-0cf7 : PCI Bus 0000:00
	  0000-001f : dma1
	  0020-0021 : pic1
	  0040-0043 : timer0
	  0050-0053 : timer1
	  0060-0060 : keyboard
	.....
	0cf8-0cff : PCI conf1		//在这里！！ 而关于这个ioports文件怎么来的，我们会在接下来讨论
	.....
	
操作的大致流程是这样的：当CPU往I/O寄存器0xCF8中写入一个综合地址后，从0号总线开始，每个PCI桥会把综合地址中的总线号与自身相比，如果相等就用逻辑设备号在本总线上寻址目标；若不相等，则把这个总线号与PCI_SUBORDINATE_BUS相比，如果落在这个范围内，则交给下层的各个PCI桥；否则就不处理。这样就可以找到最终的目标了。而这个处理方式仅存在与枚举和配置阶段，一旦所有设备配置完成，就可以快乐地通过总线地址访问目标设备了。为了更加直观，放张图：
![PCI-system](/images/ldd3-12-1.png)

##小结
到这里，基本所有的概念就讲完了，下章进入代码分析。。。其实就是按照PCI规范走就行了，再者就是一些冗长的数据结构。


##参考目录
[1]《Linux内核情景分析》[中]毛德操等 [著]

[2]《深入Linux内核架构》[德]Wolfgang Mauerer 著 [中]郭旭 译



